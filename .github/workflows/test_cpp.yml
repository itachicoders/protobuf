name: Build Protobuf Android (static libs for all ABI)

on:
  workflow_dispatch:
  push:
    branches: [ main ]
  pull_request:

jobs:
  build-android:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        abi: [armeabi-v7a, arm64-v8a, x86, x86_64]

    steps:
      - name: Checkout protobuf source
        uses: actions/checkout@v4
        with:
          repository: protocolbuffers/protobuf
          path: protobuf

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake ninja-build unzip wget

      - name: Download Android NDK
        run: |
          wget https://dl.google.com/android/repository/android-ndk-r26d-linux.zip
          unzip -q android-ndk-r26d-linux.zip
          mv android-ndk-r26d $HOME/android-ndk
          echo "NDK=$HOME/android-ndk" >> $GITHUB_ENV

      - name: Configure CMake for ${{ matrix.abi }}
        run: |
          cd protobuf
          git submodule update --init --recursive
          mkdir -p build-${{ matrix.abi }}
          cd build-${{ matrix.abi }}
          cmake .. \
            -DCMAKE_TOOLCHAIN_FILE=$NDK/build/cmake/android.toolchain.cmake \
            -DANDROID_ABI=${{ matrix.abi }} \
            -DANDROID_PLATFORM=android-21 \
            -Dprotobuf_BUILD_TESTS=OFF \
            -DCMAKE_BUILD_TYPE=Release \
            -Dprotobuf_BUILD_SHARED_LIBS=OFF \
            -G Ninja

      - name: Build libprotobuf.a (${{ matrix.abi }})
        run: |
          cd protobuf/build-${{ matrix.abi }}
          ninja

      - name: Prepare artifact folder
        run: |
          mkdir -p out/lib
          mkdir -p out/include
          cp protobuf/build-${{ matrix.abi }}/**/libprotobuf.a out/lib/
          cp -r protobuf/src/google/protobuf out/include/

      - name: Upload artifact (${{ matrix.abi }})
        uses: actions/upload-artifact@v4
        with:
          name: libprotobuf-${{ matrix.abi }}
          path: out/

  package:
    runs-on: ubuntu-latest
    needs: build-android
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Organize files
        run: |
          mkdir -p protobuf-android-libs/include
          mkdir -p protobuf-android-libs/libs

          # копируем заголовки (из любого ABI, они одинаковые)
          cp -r artifacts/libprotobuf-arm64-v8a/include/* protobuf-android-libs/include/

          # копируем статические библиотеки по ABI
          mkdir -p protobuf-android-libs/libs/armeabi-v7a
          mkdir -p protobuf-android-libs/libs/arm64-v8a
          mkdir -p protobuf-android-libs/libs/x86
          mkdir -p protobuf-android-libs/libs/x86_64

          cp artifacts/libprotobuf-armeabi-v7a/lib/libprotobuf.a protobuf-android-libs/libs/armeabi-v7a/
          cp artifacts/libprotobuf-arm64-v8a/lib/libprotobuf.a protobuf-android-libs/libs/arm64-v8a/
          cp artifacts/libprotobuf-x86/lib/libprotobuf.a protobuf-android-libs/libs/x86/
          cp artifacts/libprotobuf-x86_64/lib/libprotobuf.a protobuf-android-libs/libs/x86_64/

      - name: Create zip archive
        run: zip -r protobuf-android-libs.zip protobuf-android-libs

      - name: Upload final package
        uses: actions/upload-artifact@v4
        with:
          name: protobuf-android-libs
          path: protobuf-android-libs.zip
